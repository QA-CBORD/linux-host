import * as tslib_1 from "tslib";
import { AuthMode, VaultErrorCodes, } from './definitions';
var IonicIdentityVaultUser = /** @class */ (function () {
    function IonicIdentityVaultUser(platform, options, descriptor) {
        this.platform = platform;
        this.options = options;
        this.vIonicNativeAuth = null;
        this._readyCalled = false;
        this.descriptor = descriptor || { username: '_lastUser', vaultId: 'default' };
        this._readyPromise = this.initializeVault();
    }
    Object.defineProperty(IonicIdentityVaultUser.prototype, "token", {
        get: function () {
            var session = this.session;
            return session && session.token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonicIdentityVaultUser.prototype, "username", {
        get: function () {
            var session = this.session;
            return session && session.username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonicIdentityVaultUser.prototype, "config", {
        get: function () {
            if (!this._config) {
                return undefined;
            }
            var authMode;
            var bioEnabled = this._config.isBiometricsEnabled;
            var passEnabled = this._config.isPasscodeEnabled;
            var secureStorageMode = this._config.isSecureStorageModeEnabled;
            if (secureStorageMode) {
                authMode = AuthMode.SecureStorage;
            }
            else if (bioEnabled && passEnabled) {
                authMode = AuthMode.BiometricAndPasscode;
            }
            else if (bioEnabled && !passEnabled) {
                authMode = AuthMode.BiometricOnly;
            }
            else if (!bioEnabled && passEnabled) {
                authMode = AuthMode.PasscodeOnly;
            }
            else if (!bioEnabled && !passEnabled) {
                authMode = AuthMode.InMemoryOnly;
            }
            return {
                authMode: authMode,
                isPasscodeSetupNeeded: this._config.isPasscodeSetupNeeded,
                lockAfter: this._config.lockAfter,
                hideScreenOnBackground: this._config.hideScreenOnBackground,
            };
        },
        enumerable: true,
        configurable: true
    });
    // overidable event handlers
    IonicIdentityVaultUser.prototype.onVaultLocked = function (_event) { };
    IonicIdentityVaultUser.prototype.onSessionRestoreError = function (_err) { };
    IonicIdentityVaultUser.prototype.onUnlockOnReadyError = function (_err) { };
    IonicIdentityVaultUser.prototype.onVaultUnlocked = function (_config) { };
    IonicIdentityVaultUser.prototype.onVaultReady = function (_config) { };
    IonicIdentityVaultUser.prototype.onSetupError = function (_error) { };
    IonicIdentityVaultUser.prototype.onConfigChange = function (_config) { };
    ;
    IonicIdentityVaultUser.prototype.onSessionRestored = function (_session) { };
    ;
    IonicIdentityVaultUser.prototype.onPasscodeRequest = function (_isPasscodeSetRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    ;
    IonicIdentityVaultUser.prototype.onReady = function (vault) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inUse, locked, restoreSessionError, e_1, unlockOnReadyError, e_2, e_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._readyCalled) {
                            return [2 /*return*/];
                        }
                        this._readyCalled = true;
                        this.vault = vault;
                        return [4 /*yield*/, this.vault.isInUse()];
                    case 1:
                        inUse = _a.sent();
                        this._config = vault.config;
                        return [4 /*yield*/, this.vault.isLocked()];
                    case 2:
                        locked = _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 6, , 7]);
                        if (!(this.options.restoreSessionOnReady && inUse)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._restoreSession()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        restoreSessionError = e_1;
                        return [3 /*break*/, 7];
                    case 7:
                        _a.trys.push([7, 10, , 11]);
                        if (!(locked && this.options.unlockOnReady)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this._unlock()];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        e_2 = _a.sent();
                        unlockOnReadyError = e_2;
                        return [3 /*break*/, 11];
                    case 11:
                        _a.trys.push([11, 14, , 15]);
                        if (!!inUse) return [3 /*break*/, 13];
                        return [4 /*yield*/, this._trySetAuthMode(this.options.authMode)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        e_3 = _a.sent();
                        return [3 /*break*/, 15];
                    case 15:
                        this._readyResolve();
                        this.onVaultReady(this.config);
                        if (restoreSessionError) {
                            this.onSessionRestoreError(restoreSessionError);
                        }
                        if (unlockOnReadyError) {
                            this.onUnlockOnReadyError(restoreSessionError);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.onLock = function (event) {
        this.session = undefined;
        this.onVaultLocked(event);
    };
    IonicIdentityVaultUser.prototype.onUnlock = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        this._config = config;
                        this.onVaultUnlocked(this.config);
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.onError = function (error) {
        this._readyReject(error);
        this.onSetupError(error);
    };
    IonicIdentityVaultUser.prototype.onConfig = function (config) {
        this._config = config;
        this.onConfigChange(this.config);
    };
    IonicIdentityVaultUser.prototype.ready = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._readyPromise];
            });
        });
    };
    IonicIdentityVaultUser.prototype._unlock = function (authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var locked, _a, e_4, handleableErrors, session;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.vault.isLocked()];
                    case 1:
                        locked = _b.sent();
                        if (!locked) {
                            return [2 /*return*/];
                        }
                        authMode = authMode !== undefined && authMode !== AuthMode.BiometricOrPasscode ? authMode : this.config.authMode;
                        _a = authMode;
                        switch (_a) {
                            case AuthMode.BiometricOnly: return [3 /*break*/, 2];
                            case AuthMode.PasscodeOnly: return [3 /*break*/, 3];
                            case AuthMode.BiometricAndPasscode: return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 12];
                    case 2: return [2 /*return*/, this.vault.unlock()];
                    case 3: return [2 /*return*/, this.unlockWithPasscode()];
                    case 4:
                        _b.trys.push([4, 6, , 12]);
                        return [4 /*yield*/, this.vault.unlock()];
                    case 5:
                        _b.sent();
                        return [2 /*return*/];
                    case 6:
                        e_4 = _b.sent();
                        handleableErrors = [
                            VaultErrorCodes.AuthFailed,
                            VaultErrorCodes.BiometricsNotEnabled,
                            VaultErrorCodes.UserCanceledInteraction,
                            VaultErrorCodes.InvalidatedCredential,
                        ];
                        if (!(handleableErrors.indexOf(e_4.code) > -1)) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.unlockWithPasscode()];
                    case 7:
                        _b.sent();
                        if (!(e_4.code === VaultErrorCodes.InvalidatedCredential)) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.restoreSession()];
                    case 8:
                        session = _b.sent();
                        return [4 /*yield*/, this.saveSession(session)];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10: return [2 /*return*/];
                    case 11: throw e_4;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.unlock = function (authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._unlock(authMode)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.unlockWithPasscode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var passcode;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.onPasscodeRequest(false)];
                    case 1:
                        passcode = _a.sent();
                        return [2 /*return*/, this.vault.unlock(true, passcode)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._setPasscode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var locked, passcode;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.vault.isLocked()];
                    case 1:
                        locked = _a.sent();
                        if (locked) {
                            throw { code: VaultErrorCodes.VaultLocked, message: "Operation not allowed while vault locked." };
                        }
                        return [4 /*yield*/, this.onPasscodeRequest(true)];
                    case 2:
                        passcode = _a.sent();
                        return [2 /*return*/, this.vault.setPasscode(passcode)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.setPasscode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._setPasscode()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.getSession = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        if (!this.options.unlockOnAccess) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._unlock()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.session];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._restoreSession = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inUse, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.vault.isInUse()];
                    case 1:
                        inUse = _b.sent();
                        if (!inUse) {
                            return [2 /*return*/];
                        }
                        if (!this.options.unlockOnAccess) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._unlock()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _a = this;
                        return [4 /*yield*/, this.vault.getValue('session')];
                    case 4:
                        _a.session = _b.sent();
                        this.onSessionRestored(this.session);
                        return [2 /*return*/, this.session];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.restoreSession = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._restoreSession()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.saveSession = function (session) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_5, authMode;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        if (!this.config.isPasscodeSetupNeeded) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.setPasscode()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 9]);
                        return [4 /*yield*/, this.vault.storeValue('session', session)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 5:
                        e_5 = _a.sent();
                        if (!(e_5.code === VaultErrorCodes.SecurityNotAvailable)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.getAuthMode()];
                    case 6:
                        authMode = _a.sent();
                        if (!(authMode === AuthMode.BiometricAndPasscode)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.setAuthMode(AuthMode.PasscodeOnly)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/, this.saveSession(session)];
                    case 8: throw e_5;
                    case 9:
                        this.session = session;
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.login = function (session, authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.logout()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._trySetAuthMode(authMode)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.saveSession(session)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.getVault = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.initializeVault = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var readyPromise, _a, lockAfter, hideScreenOnBackground, shouldClearVaultAfterTooManyFailedAttempts, allowSystemPinFallback, androidPromptNegativeButtonText, androidPromptTitle, androidPromptSubtitle, androidPromptDescription;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.platform.ready()];
                    case 1:
                        _b.sent();
                        if (this.vault != null) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        if (this.vIonicNativeAuth == null) {
                            this.vIonicNativeAuth = this.getPlugin();
                        }
                        readyPromise = new Promise(function (resolve, reject) {
                            _this._readyResolve = resolve;
                            _this._readyReject = reject;
                        });
                        _a = this.options, lockAfter = _a.lockAfter, hideScreenOnBackground = _a.hideScreenOnBackground, shouldClearVaultAfterTooManyFailedAttempts = _a.shouldClearVaultAfterTooManyFailedAttempts, allowSystemPinFallback = _a.allowSystemPinFallback, androidPromptNegativeButtonText = _a.androidPromptNegativeButtonText, androidPromptTitle = _a.androidPromptTitle, androidPromptSubtitle = _a.androidPromptSubtitle, androidPromptDescription = _a.androidPromptDescription;
                        this.vault = this.vIonicNativeAuth.getVault(tslib_1.__assign({ lockAfter: lockAfter,
                            hideScreenOnBackground: hideScreenOnBackground,
                            shouldClearVaultAfterTooManyFailedAttempts: shouldClearVaultAfterTooManyFailedAttempts,
                            allowSystemPinFallback: allowSystemPinFallback,
                            androidPromptNegativeButtonText: androidPromptNegativeButtonText,
                            androidPromptTitle: androidPromptTitle,
                            androidPromptSubtitle: androidPromptSubtitle,
                            androidPromptDescription: androidPromptDescription }, this.descriptor, { onLock: this.onLock.bind(this), onConfig: this.onConfig.bind(this), onError: this.onError.bind(this), onUnlock: this.onUnlock.bind(this), onReady: this.onReady.bind(this) }));
                        return [2 /*return*/, readyPromise];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.getPlugin = function () {
        return IonicNativeAuth;
    };
    IonicIdentityVaultUser.prototype.getBiometricType = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.getBiometricType()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.getAvailableHardware = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.getAvailableHardware()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.lockOut = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.vault.lock()];
                    case 2:
                        _a.sent();
                        this.session = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.logout = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.vault.clear()];
                    case 2:
                        _b.sent();
                        this.session = undefined;
                        _a = this;
                        return [4 /*yield*/, this.vault.getConfig()];
                    case 3:
                        _a._config = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.hasStoredSession = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isInUse()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.setBiometricsEnabled = function (isBiometricsEnabled) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._setBiometricsEnabled(isBiometricsEnabled)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._setBiometricsEnabled = function (isBiometricsEnabled) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.vault.setBiometricsEnabled(isBiometricsEnabled)];
            });
        });
    };
    IonicIdentityVaultUser.prototype.setPasscodeEnabled = function (isPasscodeEnabled) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._setPasscodeEnabled(isPasscodeEnabled)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._setPasscodeEnabled = function (isPasscodeEnabled) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.vault.setPasscodeEnabled(isPasscodeEnabled)];
                    case 1:
                        _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.vault.getConfig()];
                    case 2:
                        _a._config = _b.sent();
                        if (!this.config.isPasscodeSetupNeeded) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._setPasscode()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.isBiometricsEnabled = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isBiometricsEnabled()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.isBiometricsAvailable = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isBiometricsAvailable()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.isBiometricsSupported = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isBiometricsSupported()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.isSecureStorageModeEnabled = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isSecureStorageModeEnabled()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.isPasscodeEnabled = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.vault.isPasscodeEnabled()];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._setAuthMode = function (authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        authMode = authMode !== undefined ? authMode : this.config.authMode;
                        if (authMode === this.config.authMode) {
                            return [2 /*return*/];
                        }
                        _a = authMode;
                        switch (_a) {
                            case AuthMode.BiometricOnly: return [3 /*break*/, 1];
                            case AuthMode.PasscodeOnly: return [3 /*break*/, 4];
                            case AuthMode.BiometricAndPasscode: return [3 /*break*/, 7];
                            case AuthMode.BiometricOrPasscode: return [3 /*break*/, 10];
                            case AuthMode.InMemoryOnly: return [3 /*break*/, 16];
                            case AuthMode.SecureStorage: return [3 /*break*/, 20];
                        }
                        return [3 /*break*/, 22];
                    case 1: return [4 /*yield*/, this._setBiometricsEnabled(true)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this._setPasscodeEnabled(false)];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 23];
                    case 4: return [4 /*yield*/, this._setPasscodeEnabled(true)];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, this._setBiometricsEnabled(false)];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 23];
                    case 7: return [4 /*yield*/, this._setPasscodeEnabled(true)];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, this._setBiometricsEnabled(true)];
                    case 9:
                        _b.sent();
                        return [3 /*break*/, 23];
                    case 10:
                        _b.trys.push([10, 13, , 15]);
                        return [4 /*yield*/, this._setBiometricsEnabled(true)];
                    case 11:
                        _b.sent();
                        return [4 /*yield*/, this._setPasscodeEnabled(false)];
                    case 12:
                        _b.sent();
                        return [3 /*break*/, 15];
                    case 13:
                        error_1 = _b.sent();
                        return [4 /*yield*/, this._setPasscodeEnabled(true)];
                    case 14:
                        _b.sent();
                        return [3 /*break*/, 15];
                    case 15: return [3 /*break*/, 23];
                    case 16: return [4 /*yield*/, this._setPasscodeEnabled(false)];
                    case 17:
                        _b.sent();
                        return [4 /*yield*/, this._setBiometricsEnabled(false)];
                    case 18:
                        _b.sent();
                        return [4 /*yield*/, this.vault.setSecureStorageModeEnabled(false)];
                    case 19:
                        _b.sent();
                        return [3 /*break*/, 23];
                    case 20: 
                    // Note: Setting this mode automatically disables the other modes in native code.
                    return [4 /*yield*/, this.vault.setSecureStorageModeEnabled(true)];
                    case 21:
                        // Note: Setting this mode automatically disables the other modes in native code.
                        _b.sent();
                        return [3 /*break*/, 23];
                    case 22: throw { code: VaultErrorCodes.InvalidAuthMode, message: "Invalid AuthMode" };
                    case 23: return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype._trySetAuthMode = function (authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this._setAuthMode(authMode)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        if (error_2.code !== VaultErrorCodes.BiometricsNotEnabled &&
                            error_2.code !== VaultErrorCodes.SecurityNotAvailable) {
                            throw error_2;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.setAuthMode = function (authMode) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._setAuthMode(authMode)];
                }
            });
        });
    };
    IonicIdentityVaultUser.prototype.getAuthMode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ready()];
                    case 1:
                        _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.vault.getConfig()];
                    case 2:
                        _a._config = _b.sent();
                        return [2 /*return*/, this.config.authMode];
                }
            });
        });
    };
    return IonicIdentityVaultUser;
}());
export { IonicIdentityVaultUser };
//# sourceMappingURL=vault-user.js.map