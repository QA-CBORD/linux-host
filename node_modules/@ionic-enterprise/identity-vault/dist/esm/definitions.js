/**
 * The meaning of the error code in the thrown {@link VaultError}
 */
export var VaultErrorCodes;
(function (VaultErrorCodes) {
    /**
     * An unknown error happened.
     */
    VaultErrorCodes[VaultErrorCodes["Unknown"] = 0] = "Unknown";
    /**
     * The operation failed because the vault was locked.
     */
    VaultErrorCodes[VaultErrorCodes["VaultLocked"] = 1] = "VaultLocked";
    /**
     * The operation failed because the vault was unavailable.
     * The most likely cause of this error is that a vault has not been configured.
     */
    VaultErrorCodes[VaultErrorCodes["VaultUnavailable"] = 2] = "VaultUnavailable";
    /**
     * The operation failed because the some of the vault provided arguments were invalid.
     */
    VaultErrorCodes[VaultErrorCodes["InvalidArguments"] = 3] = "InvalidArguments";
    /**
     * The credentials were invalidated. This can happen when a user changes biometrics or passcode.
     */
    VaultErrorCodes[VaultErrorCodes["InvalidatedCredential"] = 4] = "InvalidatedCredential";
    /**
     * Biometric security is unavailable due to a passcode not being set up at the system level.
     * In order to use biometric identification on the device a system level passcode must be set up by the user.
     */
    VaultErrorCodes[VaultErrorCodes["SecurityNotAvailable"] = 5] = "SecurityNotAvailable";
    /**
     * User authentication failed.
     */
    VaultErrorCodes[VaultErrorCodes["AuthFailed"] = 6] = "AuthFailed";
    /**
     * Too many failed authentication attempts so the vault was cleared an user will need to login again.
     */
    VaultErrorCodes[VaultErrorCodes["TooManyFailedAttempts"] = 7] = "TooManyFailedAttempts";
    /**
     * The user cancelled the native authentication dialog.
     */
    VaultErrorCodes[VaultErrorCodes["UserCanceledInteraction"] = 8] = "UserCanceledInteraction";
    /**
     * The user provided mismatched passcodes.
     */
    VaultErrorCodes[VaultErrorCodes["MismatchedPasscode"] = 9] = "MismatchedPasscode";
    /**
     * The operation requires passcode to be setup but it isn't set yet. Call {@link setPasscode} to set it.
     */
    VaultErrorCodes[VaultErrorCodes["MissingPasscode"] = 10] = "MissingPasscode";
    /**
     * The operation failed because the application tried to unlock the vault with passcode authentication,
     * but the vault is not configured to allow passcode authentication.
     */
    VaultErrorCodes[VaultErrorCodes["PasscodeNotEnabled"] = 11] = "PasscodeNotEnabled";
    /**
     * The key was not found. This can happen when a user changes biometrics or passcode.
     */
    VaultErrorCodes[VaultErrorCodes["KeyNotFound"] = 12] = "KeyNotFound";
    /**
     * The operation failed because biometric authentication is not enabled.
     * This can occur when biometrics is not supported by the device
     * or when biometrics has not been configured for the device or vault.
     */
    VaultErrorCodes[VaultErrorCodes["BiometricsNotEnabled"] = 13] = "BiometricsNotEnabled";
    /**
     * The provided AuthMode is invalid. Should be one of {@link AuthMode}.
     */
    VaultErrorCodes[VaultErrorCodes["InvalidAuthMode"] = 14] = "InvalidAuthMode";
})(VaultErrorCodes || (VaultErrorCodes = {}));
/**
 * The type of authentication the vault should be configured to allow.
 */
export var AuthMode;
(function (AuthMode) {
    /**
     * Biometrics authentication should only be allowed
     */
    AuthMode[AuthMode["BiometricOnly"] = 0] = "BiometricOnly";
    /**
     * Passcode authentication should only be allowed
     */
    AuthMode[AuthMode["PasscodeOnly"] = 1] = "PasscodeOnly";
    /**
     * Both biometric and passcode authentication should be allowed
     */
    AuthMode[AuthMode["BiometricAndPasscode"] = 2] = "BiometricAndPasscode";
    /**
     * Both biometric and passcode authentication should be disabled.
     * With this setting all data in the vault will be cleared on lock or
     * if the app is closed. Stored data is kept only in memory.
     */
    AuthMode[AuthMode["InMemoryOnly"] = 3] = "InMemoryOnly";
    /**
     * Use biometrics if it is available, otherwise use passcode
     */
    AuthMode[AuthMode["BiometricOrPasscode"] = 4] = "BiometricOrPasscode";
    /**
     * Both biometric and passcode authentication will be disabled but any stored values
     * will persist and be stored securely at rest using the keychain and will be available
     * without needing to authenticate via passcode or biometrics when the device is unlocked.
     */
    AuthMode[AuthMode["SecureStorage"] = 5] = "SecureStorage";
})(AuthMode || (AuthMode = {}));
//# sourceMappingURL=definitions.js.map