{"version":3,"sources":["webpack:///./node_modules/big-integer/BigInteger.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/app/core/service/barcode/barcode.service.ts","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card-resolver.service.ts","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card.component.html","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card.component.scss","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card.component.ts","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card.module.ts","webpack:///./src/app/sections/dashboard/containers/scan-card/scan-card.routing.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtoDAAoD;AACpD;;AAEA;AACA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qBAAqB,IAAI;AACvE;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA,oBAAoB,KAAK,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+GAA+G,wBAAwB;;AAEvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0FAA0F;AACjI;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA,IAAI,KAA6B;AACjC;AACA;;AAEA;AACA,IAAI,IAA0C;AAC9C,IAAI,mCAAQ;AACZ;AACA,KAAK;AAAA,oGAAC;AACN;;;;;;;;;;;;;AC56CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrB2C;AAC6C;AACnC;AACkC;AACtB;AAC3B;AAMtC;IAqBE,wBAA6B,a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","file":"containers-scan-card-scan-card-module.js","sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, from, interval, Observable, of, throwError, zip } from 'rxjs';\r\nimport { Settings, User } from '../../../app.global';\r\nimport { SettingsFacadeService } from '@core/facades/settings/settings-facade.service';\r\nimport { startWith, switchMap, take, tap } from 'rxjs/operators';\r\nimport * as bigInt from 'big-integer';\r\nimport { BigInteger } from 'big-integer';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BarcodeService {\r\n  private barcodeValue: string = null;\r\n  protected readonly _barcodeValue$: BehaviorSubject<string> = new BehaviorSubject<string>(this.barcodeValue);\r\n\r\n  private readonly generationTimer: number = 120000; /// 2 minutes in millis\r\n  private readonly garble: string = 'NTBGQ0RGM0ZFNDIyQTBBNDY5RkU=';\r\n  private readonly DIGITS_POWER: BigInteger[] = [\r\n    bigInt(1),\r\n    bigInt(10),\r\n    bigInt(100),\r\n    bigInt(1000),\r\n    bigInt(10000),\r\n    bigInt(100000),\r\n    bigInt(1000000),\r\n    bigInt(10000000),\r\n    bigInt(100000000),\r\n    bigInt(1000000000),\r\n    bigInt(10000000000),\r\n    bigInt(100000000000),\r\n  ];\r\n\r\n  constructor(private readonly settingFacade: SettingsFacadeService) {}\r\n\r\n  get barcodeValue$(): Observable<string> {\r\n    return this._barcodeValue$.asObservable();\r\n  }\r\n\r\n  set _barcodeValue(value: string) {\r\n    this.barcodeValue = value;\r\n    this._barcodeValue$.next(this.barcodeValue);\r\n  }\r\n\r\n  generateBarcode(withInterval: boolean = false): Observable<string> {\r\n    const timerObservable = interval(this.generationTimer).pipe(startWith(-1));\r\n    const barcodeObservable = zip(\r\n      this.settingFacade.getUserSetting(User.Settings.CASHLESS_KEY),\r\n      this.settingFacade.getSetting(Settings.Setting.SOA_KEY)\r\n    ).pipe(\r\n      switchMap(response => {\r\n        if (!response || response.length < 2 || !response[0] || !response[1]) {\r\n          throwError(new Error('Unable to generate barcode, required values missing'));\r\n        }\r\n        return from(this.beginBarcodeGeneration(response[0].value, response[1].value));\r\n      }),\r\n      tap(value => (this._barcodeValue = value))\r\n    );\r\n\r\n    return withInterval ? timerObservable.pipe(switchMap(v => barcodeObservable)) : barcodeObservable.pipe(take(1));\r\n  }\r\n\r\n  private async beginBarcodeGeneration(patronKey: string, institutionKey: string): Promise<string> {\r\n    /// init variables\r\n    const cryptoAlgorithm: string = 'HmacSHA256';\r\n    const returnDigits: number = 9;\r\n    const checksum: number = this.generateDigit(patronKey);\r\n    const institutionKeyBytes: Int8Array = this.hexStringToByteArray(institutionKey);\r\n    const patronKeyBytesPadded: Int8Array = this.patronKeyToByteArray(patronKey);\r\n    const cbordKeyBytes: Int8Array = this.hexStringToByteArray(atob(this.garble));\r\n    const sharedKey: Int8Array = this.XorEncrypt(cbordKeyBytes, institutionKeyBytes);\r\n    const time: BigInteger = bigInt(Date.now()).divide(bigInt(1000));\r\n\r\n    /// run totp algo\r\n    const totp: string = await this.generateTOTP(sharedKey, time, returnDigits, cryptoAlgorithm);\r\n\r\n    const encryptedKey: Int8Array = this.XorEncrypt(\r\n      patronKeyBytesPadded,\r\n      this.longToByteArrayLittleEndian(bigInt(totp))\r\n    );\r\n    const barcodeValue: string = this.createBarcodeString(\r\n      time,\r\n      this.byteArrayToLongLittleEndian(encryptedKey),\r\n      checksum\r\n    );\r\n    return barcodeValue;\r\n  }\r\n\r\n  private createBarcodeString(timestamp: BigInteger, encryptedKey: BigInteger, patronKeyChecksum: number) {\r\n    const version: string = '1';\r\n    const timeString: string = timestamp.toString().padStart(10, '0');\r\n    const keyString: string = encryptedKey.toString().padStart(10, '0');\r\n    return timeString + version + keyString + patronKeyChecksum.toString();\r\n  }\r\n\r\n  /**\r\n   * This method generates a TOTP value for the given set of parameters.\r\n   *\r\n   * @param key: the shared secret byte array\r\n   * @param time: a value that reflects a time\r\n   * @param returnDigits: number of digits to return\r\n   * @param crypto: the crypto function to use\r\n   *\r\n   * @return: a numeric String in base 10 that includes digits\r\n   */\r\n  private async generateTOTP(key: Int8Array, time: BigInteger, returnDigits: number, crypto: string): Promise<string> {\r\n    let result: string;\r\n\r\n    // convert the time to a 0 padded 8 Byte array\r\n    let msg = new Int8Array([0, 0, 0, 0, 0, 0, 0, 0]);\r\n    let timeBytes = this.longToByteArrayLittleEndian(time);\r\n    for (let i = 0; i < msg.length; i++) {\r\n      msg[msg.length - i - 1] = timeBytes[i];\r\n    }\r\n\r\n    // Perform hash\r\n    let hash: Int8Array = await this.hmac_sha(key, msg);\r\n    // put selected bytes into result int\r\n    let offset: number = hash[hash.length - 1] & 0xf;\r\n\r\n    let binary: BigInteger = bigInt(hash[offset])\r\n      .and(bigInt(0x7f))\r\n      .shiftLeft(bigInt(24))\r\n      .or(\r\n        bigInt(hash[offset + 1])\r\n          .and(bigInt(0xff))\r\n          .shiftLeft(bigInt(16))\r\n          .or(\r\n            bigInt(hash[offset + 2])\r\n              .and(bigInt(0xff))\r\n              .shiftLeft(bigInt(8))\r\n              .or(bigInt(hash[offset + 3]).and(bigInt(0xff)))\r\n          )\r\n      );\r\n\r\n    let otp: BigInteger = binary.mod(this.DIGITS_POWER[returnDigits]);\r\n\r\n    result = otp.toString();\r\n\r\n    while (result.length < returnDigits) {\r\n      result = '0' + result;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * This method uses the JCE to provide the crypto algorithm. HMAC computes a Hashed Message Authentication Code with the crypto hash algorithm as a\r\n   * parameter.\r\n   *\r\n   * @param crypto: the crypto algorithm (HmacSHA1, HmacSHA256, HmacSHA512)\r\n   * @param keyBytes: the bytes to use for the HMAC key\r\n   * @param text: the message or text to be authenticated\r\n   */\r\n  private async hmac_sha(keyBytes: Int8Array, textBytes: Int8Array): Promise<Int8Array> {\r\n    try {\r\n      const cryptoKey = await crypto.subtle.importKey('raw', keyBytes, { name: 'HMAC', hash: 'SHA-256' }, true, [\r\n        'sign',\r\n      ]);\r\n      const sig = await crypto.subtle.sign('HMAC', cryptoKey, textBytes);\r\n      return new Int8Array(sig);\r\n    } catch (gse) {\r\n      throw gse;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * XOR encrypt the given subject with the given key. subject - byte[] to be encrypted. key - byte[] array to use to encrypt subject.\r\n   */\r\n  private XorEncrypt(subject: Int8Array, key: Int8Array): Int8Array {\r\n    let result = new Int8Array(subject.length);\r\n    for (let i = 0; i < subject.length; result[i] = subject[i] ^ key[i++ % key.length]);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Prepare the patron key so that it may be encrypted\r\n   *\r\n   * @param patronKey Patron key to be converted\r\n   * @return byte[]\r\n   */\r\n  private patronKeyToByteArray(patronKey: string): Int8Array {\r\n    // Convert the patron key to a padded byte array\r\n    let patronKeyBytesPadded = new Int8Array([0, 0, 0, 0]);\r\n    // convert the patron key string to a long, then to a byte array\r\n    let patronKeyBytes = this.longToByteArrayLittleEndian(bigInt(patronKey));\r\n    // copy the bytes into a padded array\r\n    for (let i = 0; i < patronKeyBytesPadded.length; i++) {\r\n      patronKeyBytesPadded[i] = patronKeyBytes[i];\r\n    }\r\n    return patronKeyBytesPadded;\r\n  }\r\n\r\n  private hexStringToByteArray(s: string): Int8Array {\r\n    let len = s.length;\r\n    let data: Int8Array = new Int8Array(len / 2);\r\n    for (let i = 0; i < len; i += 2) {\r\n      data[i / 2] = (parseInt(s.charAt(i), 16) << 4) + parseInt(s.charAt(i + 1), 16);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Convert a given byte array to a long\r\n   *\r\n   * @param value byte array\r\n   * @return long value of the byte array\r\n   */\r\n  private byteArrayToLongBigEndian(value: Int8Array): BigInteger {\r\n    // @ts-ignore\r\n    let result: BigInteger = bigInt(0);\r\n    for (let i = 0; i < value.length; i++) {\r\n      result = result.add(\r\n        bigInt(value[value.length - i - 1])\r\n          .and(bigInt(0xff))\r\n          .shiftLeft(bigInt(8 * i))\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Convert a given byte array to a long\r\n   *\r\n   * @param value byte array\r\n   * @return long value of the byte array\r\n   */\r\n  public byteArrayToLongLittleEndian(value: Int8Array): BigInteger {\r\n    // @ts-ignore\r\n    let result: BigInteger = bigInt(0);\r\n    for (let i = 0; i < value.length; i++) {\r\n      result = result.add(\r\n        bigInt(value[i])\r\n          .and(bigInt(0xff))\r\n          .shiftLeft(bigInt(8 * i))\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts the given long number to a byte array, little endian.\r\n   *\r\n   * @param number Number to convert\r\n   * @return byte[]\r\n   */\r\n  private longToByteArrayLittleEndian(value: BigInteger): Int8Array {\r\n    let longSize = 8;\r\n    let patronKeyBytesPadded: Int8Array = new Int8Array(longSize);\r\n    for (let i = 0; i < longSize; i++) {\r\n      let bi = bigInt(i);\r\n      patronKeyBytesPadded[i] = Number(value.shiftRight(bigInt(8).multiply(bi)).and(bigInt(0xff)));\r\n    }\r\n    return patronKeyBytesPadded;\r\n  }\r\n\r\n  private generateDigit(s: string): number {\r\n    let digit = 10 - (this.doLuhn(s, true) % 10);\r\n    if (digit % 10 == 0) {\r\n      return 0;\r\n    } else {\r\n      return digit;\r\n    }\r\n  }\r\n\r\n  private doLuhn(s: string, evenPosition: boolean): number {\r\n    let sum: number = 0;\r\n    for (let i = s.length - 1; i >= 0; i--) {\r\n      let n = Number(s.substring(i, i + 1));\r\n      if (evenPosition) {\r\n        n *= 2;\r\n        if (n > 9) {\r\n          n = (n % 10) + 1;\r\n        }\r\n      }\r\n      sum += n;\r\n      evenPosition = !evenPosition;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { SettingsFacadeService } from '@core/facades/settings/settings-facade.service';\r\nimport { take } from 'rxjs/operators';\r\nimport { SettingInfo } from '@core/model/configuration/setting-info.model';\r\nimport { Settings } from '../../../../app.global';\r\n\r\n@Injectable()\r\nexport class ScanCardResolverService implements Resolve<Observable<SettingInfo>>{\r\n\r\n  constructor(private readonly settingsFacadeService: SettingsFacadeService) { }\r\n\r\n  resolve(): Observable<SettingInfo> {\r\n    return this.settingsFacadeService.getSetting(Settings.Setting.PATRON_DISPLAY_MEDIA_TYPE).pipe(take(1));\r\n  }\r\n}\r\n","module.exports = \"<st-header [title]=\\\"'Scan Card'\\\"\\r\\n           [backButtonTitle]=\\\"'Back'\\\"\\r\\n           [isToolbarShow]=\\\"true\\\"\\r\\n           [backButtonIcon]=\\\"'ios-arrow-back'\\\"\\r\\n           [isTitleShow]=\\\"true\\\"></st-header>\\r\\n<ion-content class=\\\"ion-padding\\\">\\r\\n  <st-activate-location-item [institutionName]=\\\"(institution$ | async)?.name\\\"\\r\\n                             [userFullName]=\\\"(userFullName$ | async)\\\"\\r\\n                             [userInfoId]=\\\"userInfoId$ | async\\\"\\r\\n                             [isShowId]='isMediaSettingExists$ | async'\\r\\n                             [institutionPhoto]=\\\"institutionPhoto$ | async\\\"\\r\\n                             [institutionColor]=\\\"institutionColor\\\"\\r\\n                             [userPhoto]=\\\"userPhoto\\\">\\r\\n    <div class=\\\"scan-card__barcode-wrapper\\\" [style.visibility]=\\\"(generateBarcode$ | async) ? 'visible' : 'hidden'\\\"    >\\r\\n      <canvas class=\\\"scan-card__barcode\\\"\\r\\n              id=\\\"barcodeCanvas\\\"></canvas>\\r\\n    </div>\\r\\n  </st-activate-location-item>\\r\\n</ion-content>\"","module.exports = \"/** Ionic CSS Variables **/\\n:root {\\n  /** primary **/\\n  --ion-color-primary: #005cb9;\\n  --ion-color-primary-rgb: 0, 92, 185;\\n  --ion-color-primary-contrast: #ffffff;\\n  --ion-color-primary-contrast-rgb: 255, 255, 255;\\n  --ion-color-primary-shade: #0051a3;\\n  --ion-color-primary-tint: #1a6cc0;\\n  /** secondary **/\\n  --ion-color-secondary: #0cd1e8;\\n  --ion-color-secondary-rgb: 12, 209, 232;\\n  --ion-color-secondary-contrast: #ffffff;\\n  --ion-color-secondary-contrast-rgb: 255, 255, 255;\\n  --ion-color-secondary-shade: #0bb8cc;\\n  --ion-color-secondary-tint: #24d6ea;\\n  /** tertiary **/\\n  --ion-color-tertiary: #7044ff;\\n  --ion-color-tertiary-rgb: 112, 68, 255;\\n  --ion-color-tertiary-contrast: #ffffff;\\n  --ion-color-tertiary-contrast-rgb: 255, 255, 255;\\n  --ion-color-tertiary-shade: #633ce0;\\n  --ion-color-tertiary-tint: #7e57ff;\\n  /** success **/\\n  --ion-color-success: #10dc60;\\n  --ion-color-success-rgb: 16, 220, 96;\\n  --ion-color-success-contrast: #ffffff;\\n  --ion-color-success-contrast-rgb: 255, 255, 255;\\n  --ion-color-success-shade: #0ec254;\\n  --ion-color-success-tint: #28e070;\\n  /** warning **/\\n  --ion-color-warning: #ffce00;\\n  --ion-color-warning-rgb: 255, 206, 0;\\n  --ion-color-warning-contrast: #ffffff;\\n  --ion-color-warning-contrast-rgb: 255, 255, 255;\\n  --ion-color-warning-shade: #e0b500;\\n  --ion-color-warning-tint: #ffd31a;\\n  /** danger **/\\n  --ion-color-danger: #f04141;\\n  --ion-color-danger-rgb: 245, 61, 61;\\n  --ion-color-danger-contrast: #ffffff;\\n  --ion-color-danger-contrast-rgb: 255, 255, 255;\\n  --ion-color-danger-shade: #d33939;\\n  --ion-color-danger-tint: #f25454;\\n  /** dark **/\\n  --ion-color-dark: #222428;\\n  --ion-color-dark-rgb: 34, 34, 34;\\n  --ion-color-dark-contrast: #ffffff;\\n  --ion-color-dark-contrast-rgb: 255, 255, 255;\\n  --ion-color-dark-shade: #1e2023;\\n  --ion-color-dark-tint: #383a3e;\\n  /** medium **/\\n  --ion-color-medium: #989aa2;\\n  --ion-color-medium-rgb: 152, 154, 162;\\n  --ion-color-medium-contrast: #ffffff;\\n  --ion-color-medium-contrast-rgb: 255, 255, 255;\\n  --ion-color-medium-shade: #86888f;\\n  --ion-color-medium-tint: #a2a4ab;\\n  /** light **/\\n  --ion-color-light: #f4f5f8;\\n  --ion-color-light-rgb: 244, 244, 244;\\n  --ion-color-light-contrast: #000000;\\n  --ion-color-light-contrast-rgb: 0, 0, 0;\\n  --ion-color-light-shade: #d7d8da;\\n  --ion-color-light-tint: #f5f6f9; }\\n:host {\\n  --ion-background-color: $color-very-light-gray;\\n  --ion-color-primary: $color-black; }\\n:host ion-content {\\n    background: #ccc;\\n    height: 100%; }\\n.scan-card__barcode-wrapper {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  background: #f3f3f3;\\n  border-radius: 8px;\\n  padding: 10px;\\n  margin: 25px 0; }\\n.scan-card__barcode {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map, skipWhile, switchMap, take, catchError, tap } from 'rxjs/operators';\r\nimport { Observable, timer, of } from 'rxjs';\r\nimport bwipjs from 'bwip-angular2';\r\n\r\nimport { UserInfo } from '@core/model/user';\r\nimport { Institution, InstitutionPhotoInfo } from '@core/model/institution';\r\nimport { CommerceApiService } from '@core/service/commerce/commerce-api.service';\r\nimport { SettingsFacadeService } from '@core/facades/settings/settings-facade.service';\r\nimport { NativeProvider } from '@core/provider/native-provider/native.provider';\r\nimport { getUserFullName } from '@core/utils/general-helpers';\r\nimport { UserFacadeService } from '@core/facades/user/user.facade.service';\r\nimport { InstitutionFacadeService } from '@core/facades/institution/institution.facade.service';\r\nimport { BarcodeService } from '@core/service/barcode/barcode.service';\r\nimport { Settings } from '../../../../app.global';\r\n\r\n@Component({\r\n  selector: 'st-scan-card',\r\n  templateUrl: './scan-card.component.html',\r\n  styleUrls: ['./scan-card.component.scss'],\r\n})\r\nexport class ScanCardComponent implements OnInit {\r\n  private readonly BARCODE_GEN_INTERVAL = 180000; /// 3 minutes\r\n  generateBarcode$: Observable<boolean>;\r\n  userInfoId$: Observable<string>;\r\n  institution$: Observable<Institution>;\r\n  institutionPhoto$: Observable<SafeResourceUrl>;\r\n  isMediaSettingExists$: Observable<boolean>;\r\n  userPhoto: string;\r\n  userId: string;\r\n  institutionColor: string;\r\n\r\n  constructor(\r\n    private readonly institutionFacadeService: InstitutionFacadeService,\r\n    private readonly sanitizer: DomSanitizer,\r\n    private readonly route: ActivatedRoute,\r\n    private readonly commerceApiService: CommerceApiService,\r\n    private readonly settingsFacadeService: SettingsFacadeService,\r\n    private readonly userFacadeService: UserFacadeService,\r\n    private readonly barcodeService: BarcodeService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isMediaSettingExists$ = this.settingsFacadeService\r\n      .getSetting(Settings.Setting.PATRON_DISPLAY_MEDIA_TYPE)\r\n      .pipe(map(({ value }) => !!value && !!value.length));\r\n    this.setInstitutionColor();\r\n    this.setUserId();\r\n    this.setUserPhoto();\r\n    this.setInstitution();\r\n    this.setInstitutionPhoto();\r\n    this.initBarcode();\r\n    this.userInfoId$ = this.commerceApiService.getCashlessUserId().pipe(map(d => (d.length ? d : 'None')));\r\n  }\r\n\r\n  get userFullName$(): Observable<string> {\r\n    return this.userFacadeService.getUserData$().pipe(map((userInfo: UserInfo) => getUserFullName(userInfo)));\r\n  }\r\n\r\n  private setUserId() {\r\n    this.userFacadeService\r\n      .getUserData$()\r\n      .pipe(take(1))\r\n      .subscribe(({ id }) => (this.userId = id));\r\n  }\r\n\r\n  private setUserPhoto() {\r\n    this.userFacadeService\r\n      .getAcceptedPhoto$()\r\n      .pipe(\r\n        map(({ data, mimeType }) => `data:${mimeType};base64,${data}`),\r\n        take(1)\r\n      )\r\n      .subscribe((url: string) => {\r\n        this.userPhoto = url;\r\n      });\r\n  }\r\n\r\n  private setInstitution() {\r\n    this.institution$ = this.userFacadeService.getUserData$().pipe(\r\n      switchMap(({ institutionId }: UserInfo) => this.institutionFacadeService.getInstitutionInfo$(institutionId)),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  private setInstitutionPhoto() {\r\n    this.institutionPhoto$ = this.userFacadeService.getUserData$().pipe(\r\n      switchMap(({ institutionId }: UserInfo) => this.institutionFacadeService.getInstitutionPhoto$(institutionId)),\r\n      skipWhile(d => !d || d === null),\r\n      map(({ data, mimeType }: InstitutionPhotoInfo) => {\r\n        return `data:${mimeType};base64,${data}`;\r\n      }),\r\n      map(response => this.sanitizer.bypassSecurityTrustResourceUrl(response))\r\n    );\r\n  }\r\n\r\n  private initBarcode() {\r\n    this.generateBarcode$ = this.barcodeService.generateBarcode(true).pipe(\r\n      map(value => {\r\n        this.generateBarcode(value);\r\n        return true;\r\n      }),\r\n      catchError(_ => of(false))\r\n    );\r\n  }\r\n\r\n  private generateBarcode(value: string) {\r\n    bwipjs(\r\n      'barcodeCanvas',\r\n      {\r\n        bcid: 'pdf417',\r\n        text: value,\r\n        includetext: false,\r\n        height: 10,\r\n      },\r\n      (err, cvs) => {\r\n        /// don't care\r\n      }\r\n    );\r\n  }\r\n\r\n  private setInstitutionColor() {\r\n    this.institutionColor = this.route.snapshot.queryParams.color;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { ScanCardComponent } from './scan-card.component';\r\nimport { StHeaderModule } from '@shared/ui-components/st-header/st-header.module';\r\nimport { StActivateLocationItemModule } from '@shared/ui-components/st-activate-location-item/st-activate-location-item.module';\r\nimport { ScanCardRoutingModule } from './scan-card.routing';\r\nimport { ScanCardResolverService } from '@sections/dashboard/containers/scan-card/scan-card-resolver.service';\r\n\r\nconst imports = [IonicModule, CommonModule, StHeaderModule, StActivateLocationItemModule, ScanCardRoutingModule];\r\nconst declarations = [ScanCardComponent];\r\nconst providers = [ScanCardResolverService];\r\n\r\n@NgModule({\r\n  imports,\r\n  declarations,\r\n  providers,\r\n})\r\nexport class ScanCardModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Route, RouterModule } from '@angular/router';\r\n\r\nimport { ScanCardComponent } from './scan-card.component';\r\nimport { ScanCardResolverService } from '@sections/dashboard/containers/scan-card/scan-card-resolver.service';\r\n\r\nconst routes: Route[] = [\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    component: ScanCardComponent,\r\n    resolve: { data: ScanCardResolverService },\r\n  },\r\n];\r\n\r\nconst imports = [RouterModule.forChild(routes)];\r\nconst exports = [RouterModule];\r\n\r\n@NgModule({ imports, exports })\r\nexport class ScanCardRoutingModule {\r\n}\r\n"],"sourceRoot":""}